#!/usr/bin/ruby -w
$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'distem'
require 'optparse'

USAGE="Usage: #{$0} [options]"

options = {}

options['f_daemon'] = false
options['f_verbose'] = false
options['f_enable_admin_network'] = false

optparse = OptionParser.new(USAGE) do |opts|
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
  opts.on( '-d', '--daemon', 'Execute the server as a coordinator' ) do
    options['f_daemon'] = true
  end
  opts.on( '--verbose', 'Execute the server in verbose mode' ) do
    options['f_verbose'] = true
  end
  opts.on( '--enable-admin-network', 'Create a global administration network (this leverages VXLAN support)' ) do
    options['f_enable_admin_network'] = true
  end
end
optparse.parse!

str = Distem::Lib::Shell.run('pidof lxc-wait || true')
Distem::Lib::Shell.run('killall lxc-wait') if str and !str.empty?
opts = {
  'verbose' => options['f_verbose'],
  'enable_admin_network' => options['f_enable_admin_network']
}
if (options['f_daemon'])
  puts "Starting the server in Coordinator mode"
  tid = []
  tid << Thread.new {Distem::NetAPI::ServerCoordinator.run!(opts)}
  sleep(2)
  tid << Thread.new {Distem::NetAPI::ServerPnode.run!(opts)}
  tid.each { |t| t.join}
else
  puts "Starting the server in Pnode mode"
  Distem::NetAPI::ServerPnode.run!(opts)
end
