#!/usr/bin/ruby -w
$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'wrekavoc'
require 'optparse'

USAGE="Usage: #{$0} <daemon_address> [options]"

ERR_NONE=0
ERR_VNODE=1
ERR_HOST=2

def errorcheck(errid,optvar,msg="")
  unless optvar
    case errid
      when ERR_VNODE
	errmsg="You have to specify the vnode (option --vnode)"
      when ERR_HOST
	errmsg="You have to specify the host (option --host)"
      else
	errmsg = msg
    end
    puts errmsg
    exit
  end
end

options = {}

options['f_pnode_init'] = false
options['f_vnode_create'] = false
options['f_vnode_start'] = false
options['f_vnode_stop'] = false
options['f_viface_create'] = false

options['daemon_port'] = 4567
options['pnode_addr'] = false
options['vnode_name'] = false
options['vnode_image'] = false
options['viface_name'] = false
options['viface_ip'] = false


optparse = OptionParser.new(USAGE) do |opts|
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
  opts.on( '-p', '--port NUMBER', \
    'The port that the daemon is listening on [default: 4567]' ) do |p|
    options['daemon_port'] = p
  end
  opts.on( '-H', '--host HOSTNAME', \
    'The HOSTNAME of the physical node that host virtual ones' ) do |h|
    options['pnode_addr'] = h
  end
  opts.on( '-n', '--vnode VNODENAME', \
    'The name of the Virtual Node' ) do |n|
    options['vnode_name'] = n
  end
  opts.on( '-i', '--init-pnode HOSTNAME', \
    'Initialize the physical node (start daemons, ...)' ) do |h|
    options['f_pnode_init'] = true
    options['pnode_addr'] = h
  end
  opts.on( '-c', '--create-vnode NAME,IMAGE_FILE', Array,\
    'Create the Virtual Node <NAME> deploying <IMAGE_FILE>' ) \
    do |array|
    options['f_vnode_create'] = true
    options['vnode_name'] = array[0]
    options['vnode_image'] = array[1]
  end
  opts.on( '-s', '--start-vnode',\
    'Start the virtual node' ) \
    do 
    options['f_vnode_start'] = true
  end
  opts.on( '-S', '--stop-vnode',\
    'Stop the virtual node' ) \
    do |array|
    options['f_vnode_stop'] = true
  end
  opts.on( '-f', '--create-viface NAME,IP', Array,\
    'Create the virtual interface <NAME> with the address <IP> on the Virtual Node' ) \
    do |array|
    options['f_viface_create'] = true
    options['viface_name'] = array[0]
    options['viface_ip'] = array[1]
  end
end
optparse.parse!

unless ARGV.length == 1
  puts USAGE
  exit
end


cl=false

if (options['f_pnode_init'])
  errorcheck(ERR_HOST,options['pnode_addr'])

  cl = Wrekavoc::NetAPI::Client.new(ARGV[0],options['daemon_port']) unless cl
  puts cl.pnode_init(options['pnode_addr'])
end

if (options['f_vnode_create'])
  errorcheck(ERR_HOST,options['pnode_addr'])

  cl = Wrekavoc::NetAPI::Client.new(ARGV[0],options['daemon_port']) unless cl
  puts cl.vnode_create(options['pnode_addr'],options['vnode_name'], \
    options['vnode_image'])
end

if (options['f_viface_create'])
  errorcheck(ERR_HOST,options['pnode_addr'])
  errorcheck(ERR_VNODE,options['vnode_name'])

  cl = Wrekavoc::NetAPI::Client.new(ARGV[0],options['daemon_port']) unless cl
  puts cl.viface_create(options['pnode_addr'],options['vnode_name'], \
    options['viface_name'],options['viface_ip'])
end

if (options['f_vnode_start'])
  errorcheck(ERR_HOST,options['pnode_addr'])
  errorcheck(ERR_VNODE,options['vnode_name'])

  cl = Wrekavoc::NetAPI::Client.new(ARGV[0],options['daemon_port']) unless cl
  puts cl.vnode_start(options['pnode_addr'],options['vnode_name'])
end

if (options['f_vnode_stop'])
  errorcheck(ERR_HOST,options['pnode_addr'])
  errorcheck(ERR_VNODE,options['vnode_name'])

  cl = Wrekavoc::NetAPI::Client.new(ARGV[0],options['daemon_port']) unless cl
  puts cl.vnode_stop(options['pnode_addr'],options['vnode_name'])
end
