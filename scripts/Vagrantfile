# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.

  # Number of nodes to provision

  numNodes = 3
  # IP Address Base for private network
  ipAddrPrefix = "192.168.60.10"

  names = ["frontend"] + [*(1..numNodes)].map{ |x| ("node" + x.to_s).to_sym}


  names.each_with_index do |nodeName,index|
    config.vm.define nodeName do |node|
      node.vm.box = "debian-jessie"
      #      node.vm.network :private_network, ip: ipAddrPrefix + num.to_s, virtualbox__intnet: "tap#{num}"
      ip_vnode = ipAddrPrefix + index.to_s
      node.vm.network "private_network", ip: ip_vnode
      #      node.vm.network :public_network, ip: ip_vnode, bridge: "tap#{num}"
      node.vm.provider :virtualbox do |v|
        v.name = "Compute Node" + index.to_s
        v.customize ["modifyvm", :id, "--memory", 500]
     #   v.customize ["modifyvm", :id, "--nictrace2", "on"]
     #   v.customize ["modifyvm", :id, "--nictracefile2", "/tmp/trace-distem#{num}.pcap"]
        v.customize ["modifyvm",:id,"--nicpromisc2","allow-all"]
      end
      node.vm.provision :shell, inline: "echo #{nodeName}> /etc/hostname"
      node.vm.provision :shell, inline: "echo #{ip_vnode} #{nodeName}>> /etc/hosts"
      node.vm.provision :shell, inline: "hostname #{nodeName}"

      # node.vm.provision :shell, inline: "apt-get -yf install taktuk"
      node.vm.provision :shell, inline: "DEBIAN_FRONTEND=noninteractive apt-get install -q -y ruby-dev"
      node.vm.provision :shell, inline: "gem install pry-remote ruby-cute pry-stack_explorer"
      node.vm.provision :shell, inline: "apt-get update"

      end
    end
  end

  # Writing machine file

  File.open("machinefile","w") do |f|
    (1..numNodes).each{ |n| f.puts ipAddrPrefix + n.to_s }
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

end
